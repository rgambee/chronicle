[tool.black]
diff = true
color = true

[tool.coverage.run]
branch = true
command_line = "manage.py test"
source = ["."]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "except ImportError"
]

[tool.django-stubs]
django_settings_module = "chronicle.settings"

[tool.isort]
profile = "black"

[tool.mypy]
strict = true
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = ["asgiref.*"]
ignore_errors = true

[tool.pylint.main]
# Discover python modules and packages in the file system subtree.
recursive = true

[tool.pylint.basic]
# Allow leading digits in module names to accommodate Django's migration naming
# conventions. It would be nice to configure this at the package/directory
# level, but that's not currently supported. Pylint allows config files to
# override one another, but it starts searching from the current working
# directory, not the directory of the file being checked. Since it's most
# convenient to run pylint from the project's root directory, this feature
# doesn't help in this situation.
# See here for the GitHub issue: https://github.com/PyCQA/pylint/issues/618
module-rgx = "([0-9]+_)?[a-z_]+"
# Require docstrings for classes and methods of at least 10 lines.
docstring-min-length = 10
# Don't require docstrings for methods starting with `_`, which are not
# considered part of the public API and are less important to document. Also
# exclude classes starting with `Test`, which are used for unit testing.
# Docstrings for test methods are required since they are displayed when the
# test fails.
no-docstring-rgx = "^_|^Test"

[tool.pylint.design]
# Minimum number of public methods for a class. The default of 2 is overriden
# to 0 because Meta classes inside Django Models often don't have any methods.
min-public-methods = 0
# Django views make heavy use of inheritance. Simply subclassing ListView
# is enough to exceed the default maximum number of parents (7).
max-parents = 15

[tool.pylint.format]
# Maximum number of characters on a single line. 88 is black's default.
max-line-length = 88

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "new"

[tool.pylint."messages control"]
# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = ["missing-module-docstring"]
# Warn about unused disable comments in code
enable = ["useless-suppression"]

[tool.pylint.reports]
output-format = "colorized"

[tool.pylint.string]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency = true

[tool.pylint.typecheck]
# Tell pylint about members that Django auto-generates
generated-members = ["all", "create", "id", "objects", "set"]
# Tells whether missing members accessed in mixin class should be ignored. A
# class is considered mixin if its name matches the mixin-class-rgx option.
# Tells whether to warn about missing members when the owner of the attribute is
# inferred to be None.
ignore-none = false

[tool.pylint.variables]
# Tells whether we should check for unused import in __init__ files.
init-import = true
